// Implements a dictionary's functionality
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#include "dictionary.h"


// Define node in Hash table
typedef struct node
{
    char word[LENGTH + 1];
    struct node *next;
}
node;

// Define number of Buckets
const unsigned int BUCKETS = 1;

// Define Hash table
node *table[BUCKETS];


// Returns true if word is in dictionary else false
bool check(const char *word)
{
    // TODO
    return false;
}

// Loads dictionary into memory, returning true if successful else false
bool load(const char *dictionary)
{
    // TODO
    // Open file and check if it opens
    FILE *file = fopen(dictionary, "r");
    if(file == NULL)
    {
        return false;
    }

    // Create string for words
    char word[LENGTH + 1];

    // Read each word from file untill end of file
    while(fscanf(file, "%s", word) != EOF)
    {
        // Create node and check it
        node *tmpnode = malloc(sizeof(node));
        if(tmpnode == NULL)
        {
            return false;
        }

        // copy every word into the node
        strcpy(tmpnode->word, word);
        tmpnode->next = NULL;

        // Use hash function to get index
        int index = hash(word);

        // if head node is empty
        if(table[index] == NULL)
        {
            // Use index to put word in node
            table[index] = tmpnode;
        }
        // if head node is not empty insert word at the start
        else
        {
            tmpnode->next = table[index];
            table[index] = tmpnode;
        }
    }
    return true;
}

// Returns number of words in dictionary if loaded else 0 if not yet loaded
unsigned int size(void)
{
    // TODO
    return 0;
}

// Unloads dictionary from memory, returning true if successful else false
bool unload(void)
{
    // TODO
    return true;
}

// Simple Hash function
unsigned int hash(const char *word)
{
    return 0;
}
